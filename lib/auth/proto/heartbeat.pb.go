// Code generated by protoc-gen-gogo.
// source: heartbeat.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		heartbeat.proto

	It has these top-level messages:
		Heartbeat
		Server
		CertAuthority
		ClusterEvent
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Operation identifies type of operation
type Operation int32

const (
	// PUT identifies created or updated object
	Operation_PUT Operation = 0
	// DELETE identifies deleted object
	Operation_DELETE Operation = 1
)

var Operation_name = map[int32]string{
	0: "PUT",
	1: "DELETE",
}
var Operation_value = map[string]int32{
	"PUT":    0,
	"DELETE": 1,
}

func (x Operation) String() string {
	return proto1.EnumName(Operation_name, int32(x))
}
func (Operation) EnumDescriptor() ([]byte, []int) { return fileDescriptorHeartbeat, []int{0} }

// Heartbeat
type Heartbeat struct {
	// KeepAlive is the requested keep alive time
	KeepAlive int64 `protobuf:"varint,1,opt,name=KeepAlive,json=keepAlive,proto3" json:"KeepAlive,omitempty"`
	// LeaseID is a provided lease ID of the server
	LeaseID int64 `protobuf:"varint,2,opt,name=LeaseID,json=leaseID,proto3" json:"LeaseID,omitempty"`
	// Server is an optional server contents, sent
	// if the information has been updated server side
	Server *Server `protobuf:"bytes,3,opt,name=Server,json=server" json:"Server,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto1.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptorHeartbeat, []int{0} }

func (m *Heartbeat) GetServer() *Server {
	if m != nil {
		return m.Server
	}
	return nil
}

type Server struct {
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto1.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptorHeartbeat, []int{1} }

type CertAuthority struct {
}

func (m *CertAuthority) Reset()                    { *m = CertAuthority{} }
func (m *CertAuthority) String() string            { return proto1.CompactTextString(m) }
func (*CertAuthority) ProtoMessage()               {}
func (*CertAuthority) Descriptor() ([]byte, []int) { return fileDescriptorHeartbeat, []int{2} }

// ClusterEvent returns cluster event
type ClusterEvent struct {
	// Operation identifies operation
	Operation Operation `protobuf:"varint,1,opt,name=Operation,json=operation,proto3,enum=proto.Operation" json:"Operation,omitempty"`
	// Object contains the updated object
	//
	// Types that are valid to be assigned to Object:
	//	*ClusterEvent_CertAuthority
	Object isClusterEvent_Object `protobuf_oneof:"Object"`
}

func (m *ClusterEvent) Reset()                    { *m = ClusterEvent{} }
func (m *ClusterEvent) String() string            { return proto1.CompactTextString(m) }
func (*ClusterEvent) ProtoMessage()               {}
func (*ClusterEvent) Descriptor() ([]byte, []int) { return fileDescriptorHeartbeat, []int{3} }

type isClusterEvent_Object interface {
	isClusterEvent_Object()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ClusterEvent_CertAuthority struct {
	CertAuthority *CertAuthority `protobuf:"bytes,2,opt,name=CertAuthority,json=certAuthority,oneof"`
}

func (*ClusterEvent_CertAuthority) isClusterEvent_Object() {}

func (m *ClusterEvent) GetObject() isClusterEvent_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *ClusterEvent) GetCertAuthority() *CertAuthority {
	if x, ok := m.GetObject().(*ClusterEvent_CertAuthority); ok {
		return x.CertAuthority
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClusterEvent) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _ClusterEvent_OneofMarshaler, _ClusterEvent_OneofUnmarshaler, _ClusterEvent_OneofSizer, []interface{}{
		(*ClusterEvent_CertAuthority)(nil),
	}
}

func _ClusterEvent_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*ClusterEvent)
	// Object
	switch x := m.Object.(type) {
	case *ClusterEvent_CertAuthority:
		_ = b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CertAuthority); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClusterEvent.Object has unexpected type %T", x)
	}
	return nil
}

func _ClusterEvent_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*ClusterEvent)
	switch tag {
	case 2: // Object.CertAuthority
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CertAuthority)
		err := b.DecodeMessage(msg)
		m.Object = &ClusterEvent_CertAuthority{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClusterEvent_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*ClusterEvent)
	// Object
	switch x := m.Object.(type) {
	case *ClusterEvent_CertAuthority:
		s := proto1.Size(x.CertAuthority)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto1.RegisterType((*Heartbeat)(nil), "proto.Heartbeat")
	proto1.RegisterType((*Server)(nil), "proto.Server")
	proto1.RegisterType((*CertAuthority)(nil), "proto.CertAuthority")
	proto1.RegisterType((*ClusterEvent)(nil), "proto.ClusterEvent")
	proto1.RegisterEnum("proto.Operation", Operation_name, Operation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for AuthService service

type AuthServiceClient interface {
	// ConnectHeartbeat connects node or proxy to auth service
	// auth service accepts a stream of events,
	// nodes, send heartbeats and cluster updates back
	ConnectHeartbeat(ctx context.Context, opts ...grpc.CallOption) (AuthService_ConnectHeartbeatClient, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) ConnectHeartbeat(ctx context.Context, opts ...grpc.CallOption) (AuthService_ConnectHeartbeatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AuthService_serviceDesc.Streams[0], c.cc, "/proto.AuthService/ConnectHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceConnectHeartbeatClient{stream}
	return x, nil
}

type AuthService_ConnectHeartbeatClient interface {
	Send(*Heartbeat) error
	Recv() (*ClusterEvent, error)
	grpc.ClientStream
}

type authServiceConnectHeartbeatClient struct {
	grpc.ClientStream
}

func (x *authServiceConnectHeartbeatClient) Send(m *Heartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authServiceConnectHeartbeatClient) Recv() (*ClusterEvent, error) {
	m := new(ClusterEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	// ConnectHeartbeat connects node or proxy to auth service
	// auth service accepts a stream of events,
	// nodes, send heartbeats and cluster updates back
	ConnectHeartbeat(AuthService_ConnectHeartbeatServer) error
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_ConnectHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthServiceServer).ConnectHeartbeat(&authServiceConnectHeartbeatServer{stream})
}

type AuthService_ConnectHeartbeatServer interface {
	Send(*ClusterEvent) error
	Recv() (*Heartbeat, error)
	grpc.ServerStream
}

type authServiceConnectHeartbeatServer struct {
	grpc.ServerStream
}

func (x *authServiceConnectHeartbeatServer) Send(m *ClusterEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authServiceConnectHeartbeatServer) Recv() (*Heartbeat, error) {
	m := new(Heartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectHeartbeat",
			Handler:       _AuthService_ConnectHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptorHeartbeat,
}

func (m *Heartbeat) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Heartbeat) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeepAlive != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintHeartbeat(data, i, uint64(m.KeepAlive))
	}
	if m.LeaseID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintHeartbeat(data, i, uint64(m.LeaseID))
	}
	if m.Server != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintHeartbeat(data, i, uint64(m.Server.Size()))
		n1, err := m.Server.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Server) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Server) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CertAuthority) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CertAuthority) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClusterEvent) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClusterEvent) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operation != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintHeartbeat(data, i, uint64(m.Operation))
	}
	if m.Object != nil {
		nn2, err := m.Object.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *ClusterEvent_CertAuthority) MarshalTo(data []byte) (int, error) {
	i := 0
	if m.CertAuthority != nil {
		data[i] = 0x12
		i++
		i = encodeVarintHeartbeat(data, i, uint64(m.CertAuthority.Size()))
		n3, err := m.CertAuthority.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func encodeFixed64Heartbeat(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Heartbeat(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHeartbeat(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Heartbeat) Size() (n int) {
	var l int
	_ = l
	if m.KeepAlive != 0 {
		n += 1 + sovHeartbeat(uint64(m.KeepAlive))
	}
	if m.LeaseID != 0 {
		n += 1 + sovHeartbeat(uint64(m.LeaseID))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func (m *Server) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CertAuthority) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ClusterEvent) Size() (n int) {
	var l int
	_ = l
	if m.Operation != 0 {
		n += 1 + sovHeartbeat(uint64(m.Operation))
	}
	if m.Object != nil {
		n += m.Object.Size()
	}
	return n
}

func (m *ClusterEvent_CertAuthority) Size() (n int) {
	var l int
	_ = l
	if m.CertAuthority != nil {
		l = m.CertAuthority.Size()
		n += 1 + l + sovHeartbeat(uint64(l))
	}
	return n
}

func sovHeartbeat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHeartbeat(x uint64) (n int) {
	return sovHeartbeat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Heartbeat) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Heartbeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Heartbeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepAlive", wireType)
			}
			m.KeepAlive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.KeepAlive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseID", wireType)
			}
			m.LeaseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LeaseID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &Server{}
			}
			if err := m.Server.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Server) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Server: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Server: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertAuthority) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertAuthority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertAuthority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterEvent) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			m.Operation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Operation |= (Operation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertAuthority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHeartbeat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CertAuthority{}
			if err := v.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Object = &ClusterEvent_CertAuthority{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHeartbeat(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHeartbeat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHeartbeat(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHeartbeat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHeartbeat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHeartbeat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHeartbeat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHeartbeat(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHeartbeat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHeartbeat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("heartbeat.proto", fileDescriptorHeartbeat) }

var fileDescriptorHeartbeat = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x50, 0xdd, 0x4e, 0xf2, 0x40,
	0x10, 0xed, 0x7e, 0xe4, 0x2b, 0x74, 0x10, 0x69, 0x56, 0x2f, 0x1a, 0x34, 0x0d, 0x69, 0x62, 0x42,
	0xbc, 0x00, 0x53, 0x6f, 0x4d, 0x0c, 0x3f, 0x4d, 0x30, 0x12, 0x31, 0x15, 0x1f, 0xa0, 0x6d, 0x46,
	0x28, 0xd6, 0x6e, 0xb3, 0x2c, 0x24, 0xbc, 0x80, 0xcf, 0xe0, 0x23, 0x79, 0xe9, 0x23, 0x18, 0x7c,
	0x11, 0xc3, 0x96, 0xc5, 0xea, 0xd5, 0xec, 0x9c, 0x39, 0xe7, 0xec, 0x99, 0x81, 0xfa, 0x0c, 0x03,
	0x2e, 0x42, 0x0c, 0x44, 0x3b, 0xe3, 0x4c, 0x30, 0xfa, 0x5f, 0x96, 0xc6, 0xc9, 0x94, 0xb1, 0x69,
	0x82, 0x1d, 0xd9, 0x85, 0xcb, 0xa7, 0x0e, 0xbe, 0x64, 0x62, 0x9d, 0x73, 0x9c, 0x39, 0x18, 0x43,
	0x25, 0xa3, 0xa7, 0x60, 0xdc, 0x22, 0x66, 0xdd, 0x24, 0x5e, 0xa1, 0x45, 0x9a, 0xa4, 0x55, 0xf2,
	0x8d, 0x67, 0x05, 0x50, 0x0b, 0xca, 0x23, 0x0c, 0x16, 0x78, 0x33, 0xb0, 0xfe, 0xc9, 0x59, 0x39,
	0xc9, 0x5b, 0x7a, 0x06, 0xfa, 0x03, 0xf2, 0x15, 0x72, 0xab, 0xd4, 0x24, 0xad, 0xaa, 0x5b, 0xcb,
	0xcd, 0xdb, 0x39, 0xe8, 0xeb, 0x0b, 0x59, 0x9d, 0x8a, 0xa2, 0x39, 0x75, 0xa8, 0xf5, 0x91, 0x8b,
	0xee, 0x52, 0xcc, 0x18, 0x8f, 0xc5, 0xda, 0x79, 0x25, 0x70, 0xd0, 0x4f, 0x96, 0x0b, 0x81, 0xdc,
	0x5b, 0x61, 0x2a, 0x68, 0x1b, 0x8c, 0x71, 0x86, 0x3c, 0x10, 0x31, 0x4b, 0x65, 0x94, 0x43, 0xd7,
	0xdc, 0xb9, 0xee, 0x71, 0xdf, 0x60, 0xea, 0x49, 0xaf, 0xfe, 0x38, 0xca, 0x88, 0x55, 0xf7, 0x78,
	0xa7, 0xf9, 0x35, 0x1b, 0x6a, 0x7e, 0x2d, 0x2a, 0x02, 0xbd, 0x0a, 0xe8, 0xe3, 0x70, 0x8e, 0x91,
	0x38, 0x6f, 0x16, 0xfe, 0xa5, 0x65, 0x28, 0xdd, 0x3f, 0x4e, 0x4c, 0x8d, 0x02, 0xe8, 0x03, 0x6f,
	0xe4, 0x4d, 0x3c, 0x93, 0xb8, 0x77, 0x50, 0xdd, 0x0a, 0xb7, 0x9b, 0xc4, 0x11, 0xd2, 0x6b, 0x30,
	0xfb, 0x2c, 0x4d, 0x31, 0x12, 0x3f, 0x77, 0x54, 0x49, 0xf7, 0x48, 0xe3, 0x48, 0xe5, 0x28, 0xec,
	0xe8, 0x68, 0x2d, 0x72, 0x41, 0x7a, 0xe6, 0xfb, 0xc6, 0x26, 0x1f, 0x1b, 0x9b, 0x7c, 0x6e, 0x6c,
	0xf2, 0xf6, 0x65, 0x6b, 0xa1, 0x2e, 0xb9, 0x97, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x6c,
	0x3c, 0x01, 0xd1, 0x01, 0x00, 0x00,
}
