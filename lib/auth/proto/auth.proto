syntax = "proto3";
package proto;

import "google/protobuf/empty.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;


message KeepAlive {
    // ServerName is a server name to keep alive
    string ServerName = 1;
    // Namespace is a server namespace
    string Namespace = 2;
    // LeaseID is ID of the lease
	int64 LeaseID = 3;    
    // Expires is set to update expirty time
    int64 Expires = 4;
}

message Metadata {
    // Name is an object name
	string Name = 1;
	// Namespace is object namespace. The field should be called "namespace"
	// when it returns in Teleport 2.4.
	string Namespace = 2;
	// Description is object description
	string Description = 3;
	// Labels is a set of labels
	map <string, string> Labels = 5;
	// Expires is a global expiry time header can be set on any resource in the system.
	int64 Expires = 6;
}

// Server represents a Node, Proxy or Auth server in a Teleport cluster
message Server {
    // Kind is a resource kind
    string Kind = 1;
	// Version is version    
    string Version = 2;
	// Metadata is User metadata    
    Metadata Metadata = 3  [(gogoproto.nullable) = false];
    // Spec is a server spec
    ServerSpecV2 Spec = 4  [(gogoproto.nullable) = false];
}

// ServerSpecV2 is a specification for V2 Server
message ServerSpecV2  {
	// Addr is server host:port address
	string Addr = 1 [(gogoproto.jsontag) = "addr"] ;
	// PublicAddr is the public address this cluster can be reached at.
	string PublicAddr = 2;
	// Hostname is server hostname
	string Hostname = 3;
	// CmdLabels is server dynamic labels
	map <string, CommandLabelV2> CmdLabels = 4;
	// Rotation specifies server rotatoin status
	Rotation Rotation  = 5 [(gogoproto.nullable) = false];
}

// CommandLabelV2 is a label that has a value as a result of the
// output generated by running command, e.g. hostname
message CommandLabelV2 {
	// Period is a time between command runs
	int64 Period = 1;
	// Command is a command to run
	repeated string Command = 2;
	// Result captures standard output
	string Result = 3;
}

// Rotation is a status of the rotation of the certificate authority
message Rotation {
	// State could be one of "init" or "in_progress".
	string State = 1;
	// Phase is the current rotation phase.
	string Phase = 2;
	// Mode sets manual or automatic rotation mode.
	string Mode = 3;
	// CurrentID is the ID of the rotation operation
	// to differentiate between rotation attempts.
	string CurrentID = 4;
	// Started is set to the time when rotation has been started
	// in case if the state of the rotation is "in_progress".
	int64 Started = 5;
	// GracePeriod is a period during which old and new CA
	// are valid for checking purposes, but only new CA is issuing certificates.
	int64 GracePeriod = 6;
	// LastRotated specifies the last time of the completed rotation.
	int64 LastRotated = 7;
	// Schedule is a rotation schedule - used in
	// automatic mode to switch beetween phases.
	RotationSchedule Schedule = 8  [(gogoproto.nullable) = false];
}

// RotationSchedule is a rotation schedule setting time switches
// for different phases.
message RotationSchedule {
	// UpdateClients specifies time to switch to the "Update clients" phase
	int64 UpdateClients = 1;
	// UpdateServers specifies time to switch to the "Update servers" phase.
	int64 UpdateServers = 2;
	// Standby specifies time to switch to the "Standby" phase.
	int64 Standby = 3;
}

message CertAuthority {
}

// Resource is a resource definition
// used in cases when only type and name is known
message Resource {
    // Kind is a resource kind
    string Kind = 1;
	// Version is version    
    string Version = 2;
	// Metadata is User metadata    
    Metadata Metadata = 3;
}

// Operation identifies type of operation
enum Operation {
    // PUT identifies created or updated object
    PUT    = 0;
    // DELETE identifies deleted object
    DELETE = 1;
}

// Event returns cluster event
message Event {
    // Operation identifies operation
    Operation Operation = 1;
    // Object contains the updated object
    oneof Object {
        // Resource is used in delete operations
        Resource Resource = 2;
        // CertAuthority returns updated cert authority state
        CertAuthority CertAuthority = 3;
    }
}

// Watch
message Watch {
    // Kinds specifies object kinds to watch
    repeated string Kinds = 1;
}

// AuthService is authentication/authorization service implementation
service AuthService {
    // SendKeepAlives allows node to send a stream of keep alive requests
    rpc SendKeepAlives(stream KeepAlive) returns (google.protobuf.Empty);
    // WatchEvents returns a new stream of cluster events
    rpc WatchEvents(Watch) returns (stream Event);
    // UpsertNode upserts node
    rpc UpsertNode(Server) returns (KeepAlive);
}
